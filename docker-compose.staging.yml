version: '3.8'

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      - MONGODB_URI=${MONGODB_URI}
      - AI_PROVIDER=${AI_PROVIDER:-google}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
    volumes:
      - uploads:/app/uploads
      - ./server/.env.production:/app/server/.env.production:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - setup-env

  setup-env:
    image: alpine:latest
    volumes:
      - ./:/workspace
    working_dir: /workspace
    command: >
      sh -c "
        echo 'Setting up environment...' &&
        if [ ! -f server/.env.production ]; then
          echo 'Creating production environment file...' &&
          cp server/.env.example server/.env.production &&
          echo 'Please update server/.env.production with your production values'
        fi &&
        echo 'Environment setup complete'
      "

volumes:
  uploads:
    driver: local

# Health check service for monitoring
# Uncomment for additional monitoring container
# services:
#   monitoring:
#     image: prom/prometheus:latest
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--web.console.libraries=/etc/prometheus/console_libraries'
#       - '--web.console.templates=/etc/prometheus/consoles'
#       - '--storage.tsdb.retention.time=200h'
#       - '--web.enable-lifecycle'
#     depends_on:
#       - app